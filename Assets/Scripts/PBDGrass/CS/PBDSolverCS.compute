#pragma kernel PBDSolver
#pragma kernel UpdateMesh
#pragma kernel GridCulling

#define XThreads 32
#define BoneCounts 4

struct FixedConstraintStruct
{
    int i0;
    float3 fixedPos;
};
struct DistanceConstraintStruct
{
    float RestLength;
    float ElasticModulus;
    int i0, i1;
};

struct SphereCollision
{
    float3 Position;
    float Radius;
};

float dt;

float3 Gravity;
float3 WindForce;
float Friction;
float StopThreshold;

float Mass;

RWStructuredBuffer<float3> PositionBuffer;
RWStructuredBuffer<float3> PredictedBuffer;
RWStructuredBuffer<float3> VelocitiesBuffer;
RWStructuredBuffer<float3> OriginPosBuffer;
RWStructuredBuffer<FixedConstraintStruct> FconsBuffer;
RWStructuredBuffer<DistanceConstraintStruct> DconsBuffer;

RWStructuredBuffer<SphereCollision> BallBuffer;

RWStructuredBuffer<float3> ResultPosBuffer;

struct PBDGrid
{
    float3 pos;
    int idOffset;
};
RWStructuredBuffer<PBDGrid> GridsToComputeBuffer;

float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
			t * x * x + c, t * x * y - s * z, t * x * z + s * y,
			t * x * y + s * z, t * y * y + c, t * y * z - s * x,
			t * x * z - s * y, t * y * z + s * x, t * z * z + c
			);
}

[numthreads(XThreads, 1, 1)] // GridsVisibleBuffer[id.y].idOffset + idInGroup.x body
void PBDSolver(uint3 id : SV_DispatchThreadID, uint3 idInGroup : SV_GroupThreadID)
{
    int idx = (GridsToComputeBuffer[id.y].idOffset + idInGroup.x);
    
    // Apply Force ************
    for (int i = 1; i < BoneCounts - 1; i++)
    {
        int idb = idx * BoneCounts + i;
        
        // air friction
        VelocitiesBuffer[idb] -= VelocitiesBuffer[idb] * Friction * dt;
        // gravity
        VelocitiesBuffer[idb] += Gravity * dt;
        // recovery force
        VelocitiesBuffer[idb] += (OriginPosBuffer[idb] - PredictedBuffer[idb]) * dt * 2000;
    }
    int rootID = idx * BoneCounts;
    int topID = rootID + BoneCounts - 1;    
    // air friction
    VelocitiesBuffer[topID] -= VelocitiesBuffer[topID] * Friction * dt;
    // gravity
    VelocitiesBuffer[topID] += Gravity * dt;
    // recovery force
    VelocitiesBuffer[topID] += (OriginPosBuffer[topID] - PredictedBuffer[topID]) * dt * 2000;
    // wind force
    VelocitiesBuffer[topID] += WindForce * dt;
    
    // Apply Swinging **********
    /*float3 Gstatic = OriginPosBuffer[rootID] - OriginPosBuffer[topID];
    float3 Gcur = PositionBuffer[rootID] - OriginPosBuffer[topID];
    for (i = 0; i < BoneCounts; i++)
    {
        
    }*/
    
    // Estimate Positions ***********
    for (i = 0; i < BoneCounts; i++)
    {
        int idb = idx * BoneCounts + i;
        // update position with new velocity
        PredictedBuffer[idb] = PositionBuffer[idb] + dt * VelocitiesBuffer[idb];
    }
    
    // ResolveCollision *************
    uint ballCount = 0;
    uint ballStride = 0;
    BallBuffer.GetDimensions(ballCount, ballStride);
    for (i = 0; i < BoneCounts; i++)
    {
        int idb = idx * BoneCounts + i;
        
        for (uint j = 0; j < ballCount; j++)
        {
            float3 b2g = PredictedBuffer[idb] - BallBuffer[j].Position;
            float len = length(b2g);
            float3 b2gNormalize = normalize(b2g);
        
            float offset = len - BallBuffer[j].Radius;
            if (offset < 0)
            {
                float3 targetPos = BallBuffer[j].Position + b2gNormalize * BallBuffer[j].Radius;
                PositionBuffer[idb] = targetPos;
                PredictedBuffer[idb] = targetPos;
                VelocitiesBuffer[idb] = float3(0, 0, 0);
                break;
            }
        }
    }
    
    // Do Constraints ***************
    float stepDT = 1.0f / 4.0f;
    
    // distance constraints
    int dconsIndexOffset = idx * (BoneCounts - 1);
    float invMass = 1.0f / Mass;
    float sum = Mass * 2.0f;
    for (i = 0; i < 4; i++)  // 4 iteration
    {
        for (int j = 0; j < BoneCounts - 1; j++)   // 3 dcons
        {
            int i1 = DconsBuffer[dconsIndexOffset + j].i1 + idx * BoneCounts;
            int i0 = DconsBuffer[dconsIndexOffset + j].i0 + idx * BoneCounts;
            float3 n = PredictedBuffer[i1] - PredictedBuffer[i0];
            float d = length(n);
            n = normalize(n);

            float3 corr = DconsBuffer[dconsIndexOffset + j].ElasticModulus * n * (d - DconsBuffer[dconsIndexOffset + j].RestLength) * sum;

            PredictedBuffer[i0] += invMass * corr * stepDT;

            PredictedBuffer[i1] -= invMass * corr * stepDT;
        }
    }
    
    // fixed constraints
    PositionBuffer[FconsBuffer[idx].i0 + idx * BoneCounts] = FconsBuffer[idx].fixedPos;
    PredictedBuffer[FconsBuffer[idx].i0 + idx * BoneCounts] = FconsBuffer[idx].fixedPos;
    
    
    // UpdateVelocities ****************
    float threshold = StopThreshold * dt;
    for (i = 0; i < BoneCounts; i++)
    {
        int boneIndex = idx * BoneCounts + i;
    
        float3 dist = PredictedBuffer[boneIndex] - PositionBuffer[boneIndex];
        VelocitiesBuffer[boneIndex] = dist / dt;
        if (length(VelocitiesBuffer[boneIndex]) < threshold)
            VelocitiesBuffer[boneIndex] = float3(0, 0, 0);
    }
    
    // Update Positions ********************
    for (i = 0; i < BoneCounts; i++)
    {
        int boneIndex = idx * BoneCounts + i;
        PositionBuffer[boneIndex] = PredictedBuffer[boneIndex];
    }

}

RWStructuredBuffer<float3> OffsetBuffer;
RWStructuredBuffer<int> IndexOffsetBuffer;
[numthreads(XThreads, 1, 1)]
void UpdateMesh(uint3 id : SV_DispatchThreadID, uint3 idInGroup : SV_GroupThreadID)
{
    int idx = (GridsToComputeBuffer[id.y].idOffset + idInGroup.x);
    
    int boneOffset = idx * BoneCounts;
    int offsetOffset = idx * (BoneCounts - 1);
    int index = 0;
    for (int i = 0; i < (BoneCounts * 2 - 1) - 2; i += 2)
    {
        ResultPosBuffer[i + IndexOffsetBuffer[idx]] = PositionBuffer[boneOffset + index] + OffsetBuffer[offsetOffset + index];
        ResultPosBuffer[i + 1 + IndexOffsetBuffer[idx]] = PositionBuffer[boneOffset + index] - OffsetBuffer[offsetOffset + index];
        ++index;
    }
    ResultPosBuffer[(BoneCounts * 2 - 1) - 1 + IndexOffsetBuffer[idx]] = PositionBuffer[boneOffset + index];
}

StructuredBuffer<PBDGrid> GridsAllBuffer;
RWStructuredBuffer<PBDGrid> GridsVisibleBuffer;
RWStructuredBuffer<int> bufferWithArgs;
RWStructuredBuffer<int> bufferWithArgsDrawIndirect;

float3 camPos;
float3 camDir;
float camHalfFov;
float4x4 _Matrix_VP;
Texture2D _DepthTex;

[numthreads(32, 1, 1)]
void GridCulling(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    
    //https://math.stackexchange.com/questions/237369/given-this-transformation-matrix-how-do-i-decompose-it-into-translation-rotati/417813
    float3 itemPos = GridsAllBuffer[index].pos;
    float3 itemDir = normalize(itemPos - camPos);
    
    float dist = distance(itemPos, camPos);
    if (dist >= 90)
        return;
    
    int currentIndexToCompute;
    InterlockedAdd(bufferWithArgs[1], 1, currentIndexToCompute);
    GridsToComputeBuffer[currentIndexToCompute] = GridsAllBuffer[id.x];
    
    float4 clipPos = mul(_Matrix_VP, float4(itemPos - camDir * 0.2, 1));
    
    //view frustrum
    if (max(abs(clipPos.x), abs(clipPos.y)) > clipPos.w + 0.7)
        return;
    
    clipPos.xyz /= clipPos.w;
    clipPos.xy = clipPos.xy * 0.5 + 0.5;
    
    float scWid = 0.2 / (tan(camHalfFov * 3.1415926 / 180) * clipPos.w) * 1024;
    
    uint mips = (uint) clamp(log2(scWid), 0, 7);
    
    uint texScale = 1 << mips;
    uint2 uv = uint2(clipPos.xy * (1024 / texScale));
    
    float minD = min(min(_DepthTex.mips[mips][uv.xy + uint2(0, 0)].r, _DepthTex.mips[mips][uv.xy + uint2(0, 1)].r), min(_DepthTex.mips[mips][uv.xy + uint2(1, 0)].r, _DepthTex.mips[mips][uv.xy + uint2(1, 1)].r));
    if (minD > clipPos.z)
        return;
    
    int currentIndexToDraw;
    InterlockedAdd(bufferWithArgsDrawIndirect[1], 1, currentIndexToDraw);
    GridsVisibleBuffer[currentIndexToDraw] = GridsAllBuffer[id.x];
}